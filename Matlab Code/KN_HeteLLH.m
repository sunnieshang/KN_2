function [LLH, grad] = KN_HeteLLH(...
    param, ID_mat, pred_num, serq_num, vip_route, P_mat, RMExp_mat, draws)
    
    ndraws = size(draws, 3); 
    beta_mu = param(1: pred_num + serq_num)'; 
    beta_sigma = exp(param(end - 1 : end))'; 
%     gamma = 0;
    gamma_mu = param(end - 3);  
    gamma_sigma = exp(param(end - 2));
    route_max = size(RMExp_mat, 2);
    nvip = length(vip_route); 
    T = size(ID_mat, 1) / nvip; 
    vip_route_rate = zeros(nvip, route_max);
    index = pred_num + serq_num + 1;
    for i = 1: nvip
        vip_route_rate(i, 1) = 1/ ...
            (1 + sum(exp(param(index: (index+vip_route(i)-2)))));
        vip_route_rate(i, 2: vip_route(i)) = exp(param(index: index+vip_route(i)-2)) ...
            ./ (1 + sum(exp(param(index: (index+vip_route(i)-2)))));
        index = index + vip_route(i) - 1; 
    end
    draws_beta = zeros(size(draws, 1), pred_num + serq_num, size(draws, 3));
    for i = 1: pred_num+serq_num
        draws_beta(:, i, :) = beta_sigma(i) .* draws(:, i, :) + beta_mu(i);
    end
    draws_gamma = gamma_sigma .* draws(:, end, :) + gamma_mu; 
    IndU = zeros(size(P_mat, 1), size(P_mat, 2), 2);
    P_IR = zeros(nvip, ndraws); 
    GG = zeros(nvip, length(param));
    grad = zeros(length(param), 1);
    mid_mat = kron(eye(nvip), ones(T, 1))';
    
    for i = 1: ndraws           
%     We need a 3D matrix here (different than the simulation code) since
%     we need to write down all the possible utility of all possible routes
        IndU(:, :, 1) = KN_IndUtility(1: T*nvip, draws_gamma(:, i),...
            draws_beta(:, :, i), RMExp_mat, P_mat, vip_route);
        IndU(:, :, 1) = exp(IndU(:, :, 1)); 
        IndU(:, :, 1) = IndU(:, :, 1) ./ (1 + IndU(:, :, 1));
        IndU(:, :, 2) = IndU(:, :, 1) .* kron(vip_route_rate, ones(T, 1)); 
        logP = ID_mat(:, 7) .* log(IndU(sub2ind(size(IndU), ...
            (1: nvip*T)', ID_mat(:, 3), 2 * ones(nvip*T, 1)))) ...
            + (1 - ID_mat(:, 7)) .* log(1 - sum(IndU(:, :, 2), 2));           
        P_IR(:, i) = exp(mid_mat * logP);
        
        if nargout > 1 
            for j = 1: pred_num
                GG(:, j) = GG(:, j) + P_IR(:, i).*(mid_mat * (ID_mat(:, 7) .* (1 - ...
                IndU(sub2ind(size(IndU), (1: 1: nvip*T)', ID_mat(:, 3), 1 * ones(nvip*T, 1)))) ...
                .* ID_mat(:, 4) - (1 - ID_mat(:, 7)) ./ (1 - sum(IndU(:, :, 2), 2))...
                .* sum(IndU(:, :, 2) .* (1 - IndU(:, :, 1)) ...
                .* P_mat, 2)));
            end
            GG(:, pred_num + serq_num) = GG(:, pred_num + serq_num) + ...
                P_IR(:, i).*(mid_mat * (ID_mat(:, 7) .* (1 - ...
                IndU(sub2ind(size(IndU), (1: 1: nvip*T)', ID_mat(:, 3), 1 * ones(nvip*T, 1)))) ...
                .* RMExp_mat(sub2ind(size(RMExp_mat), (1: 1: nvip*T)', ID_mat(:, 3))) - ...
                (1 - ID_mat(:, 7)) ./ (1 - sum(IndU(:, :, 2), 2))...
                .* sum(IndU(:, :, 2) .* (1 - IndU(:, :, 1)).* RMExp_mat, 2)));
            
            GG(:, end - 3) = GG(:, end - 3) + ...
                P_IR(:, i).*(mid_mat * (ID_mat(:, 7) .* (1 - ...
                IndU(sub2ind(size(IndU), (1: 1: nvip*T)', ID_mat(:, 3), 1 * ones(nvip*T, 1)))) - ...
                (1 - ID_mat(:, 7)) ./ (1 - sum(IndU(:, :, 2), 2))...
                .* sum(IndU(:, :, 2) .* (1 - IndU(:, :, 1)), 2)));
            
            for j = 1: nvip
                if (j==1)
                    index = pred_num + serq_num + 1;
                else 
                    index = index + vip_route(j-1) - 1; 
                end
                aux = zeros(vip_route(j), T);
                aux(sub2ind(size(aux), ID_mat(T*(j-1)+1:T*j, 3), (1:T)')) = 1;
                aux = aux(2:end, :);
                GG(j, index: index + vip_route(j) - 2) = ...
                    GG(j, index: index + vip_route(j) - 2) - ...
                    P_IR(j, i)*((repmat(vip_route_rate(j, 2:vip_route(j))', 1, T) - aux)...
                    *ID_mat(T*(j-1)+1:T*j, 7) + ...
                    vip_route_rate(j, 2:vip_route(j))' .* ...
                    ((IndU(T*(j-1)+1:T*j, 2:vip_route(j), 1) - ...
                    repmat(sum(IndU(T*(j-1)+1:T*j, :, 2), 2), 1, vip_route(j)-1))'* ...
                    ((1 - ID_mat(T*(j-1)+1:T*j, 7)) ./ ...
                    (1 - sum(IndU(T*(j-1)+1:T*j, :, 2), 2)))))';
            end 
            
            GG(:, end-2) = GG(:, end-2) + P_IR(:, i).*(mid_mat * (ID_mat(:, 7) .* (1 - ...
                IndU(sub2ind(size(IndU), (1: 1: nvip*T)', ID_mat(:, 3), 1 * ones(nvip*T, 1)))) ...
                - (1 - ID_mat(:, 7)) ./ (1 - sum(IndU(:, :, 2), 2))...
                .* sum(IndU(:, :, 2) .* (1 - IndU(:, :, 1)) ...
                , 2))) .* draws(:, end, i) .* gamma_sigma;
            
            GG(:, end-1) = GG(:, end-1) + P_IR(:, i).*(mid_mat * (ID_mat(:, 7) .* (1 - ...
                IndU(sub2ind(size(IndU), (1: 1: nvip*T)', ID_mat(:, 3), 1 * ones(nvip*T, 1)))) ...
                .* ID_mat(:, 4) - (1 - ID_mat(:, 7)) ./ (1 - sum(IndU(:, :, 2), 2))...
                .* sum(IndU(:, :, 2) .* (1 - IndU(:, :, 1)) ...
                .* P_mat, 2))) .* draws(:, 1, i) .* beta_sigma(1);
            
            GG(:, end) = GG(:, end) + ...
                P_IR(:, i).*(mid_mat * (ID_mat(:, 7) .* (1 - ...
                IndU(sub2ind(size(IndU), (1: 1: nvip*T)', ID_mat(:, 3), 1 * ones(nvip*T, 1)))) ...
                .* RMExp_mat(sub2ind(size(RMExp_mat), (1: 1: nvip*T)', ID_mat(:, 3))) - ...
                (1 - ID_mat(:, 7)) ./ (1 - sum(IndU(:, :, 2), 2))...
                .* sum(IndU(:, :, 2) .* (1 - IndU(:, :, 1)).* RMExp_mat, 2))) ...
                 .* draws(:, 2, i) .* beta_sigma(2);
        end
    end
   
    LLH  = -sum(log(mean(P_IR, 2)));
    if nargout > 1
        grad = -sum(GG./repmat(sum(P_IR, 2), 1, length(param)), 1)';
    end
end